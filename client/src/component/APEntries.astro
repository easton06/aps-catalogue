---
import Image from "./Image.astro";
import Table from "./Table.astro";

const { name, separate, printonly, screenonly } = Astro.props
// separate === 0/undefined ? not detached, separate > 0 ? detached

const fetchedData = await fetch(`http://localhost:5555/aps/${name}`).then(response => response.json())

const tableData = fetchedData.value.slice(0, separate? 1 + separate : undefined);
const secondTableData = [fetchedData.value[0], ...fetchedData.value.slice(separate? 1 + separate : 0)];

---
<tr class={`${printonly ? "[@media_only_screen]:!hidden" : screenonly? "[@media_only_print]:!hidden" : ""}`}>
  <td class={"break-inside-avoid-page"}>
    <div id={name} class="bg-indigo-800 py-1 px-4 text-white text-lg font-serif border-b-4 border-b-indigo-100">
      <h1>{name} </h1>
    </div>
    <div class="px-4">
      <div class="flex justify-center flex-wrap py-1 gap-1">
      {
        fetchedData.status === "ok"? 
          fetchedData.value.slice(1, separate? 1 + separate : undefined).map((entry: string[], i : number) => (
            <Image entry={entry[5]} width={29} height={29}/>
            <Image entry={entry[6] + "(" + entry[0] + ")"} width={29} height={29} />
          ))
        : 
          <div>Error: {fetchedData.value}</div>
      }
      </div>
      <div class="py-1">
        <Table raw={tableData} omit_col={2} />
      </div>
    </div>
  </td>
</tr>
{
  separate > 0 ?
  <tr class={`${printonly ? "[@media_only_screen]:!hidden" : screenonly? "[@media_only_print]:!hidden" : ""}`}>
    <td class={"break-inside-avoid-page"}>
      <div id={name} class="bg-indigo-800 py-1 px-2 text-white text-lg font-serif border-b-4 border-b-indigo-100">
        <h1>{name} </h1>
      </div>
      <div class="px-2">
        <div class="flex justify-center [@media_only_screen_and_(max-width:_640px)]:flex-col flex-wrap py-1 gap-1">
        {
          fetchedData.status === "ok"? 
            fetchedData.value.slice(1 + separate).map((entry: string[], i : number) => (
              <Image entry={entry[5]}/>
              <Image entry={entry[6] + "(" + entry[0] + ")"} />
            ))
          : 
            <div>Error: {fetchedData.value}</div>
        }
        </div>
        <div class="py-1">
          <Table raw={secondTableData} omit_col={2} />
        </div>
      </div>
    </td>
  </tr>
:
  <></>
}